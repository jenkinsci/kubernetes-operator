// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/jenkins.go

// Package mock is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gojenkins "github.com/bndr/gojenkins"
	gomock "github.com/golang/mock/gomock"
)

// MockJenkins is a mock of Jenkins interface.
type MockJenkins struct {
	ctrl     *gomock.Controller
	recorder *MockJenkinsMockRecorder
}

// MockJenkinsMockRecorder is the mock recorder for MockJenkins.
type MockJenkinsMockRecorder struct {
	mock *MockJenkins
}

// NewMockJenkins creates a new mock instance.
func NewMockJenkins(ctrl *gomock.Controller) *MockJenkins {
	mock := &MockJenkins{ctrl: ctrl}
	mock.recorder = &MockJenkinsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJenkins) EXPECT() *MockJenkinsMockRecorder {
	return m.recorder
}

// BuildJob mocks base method.
func (m *MockJenkins) BuildJob(ctx context.Context, name string, options map[string]string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJob", ctx, name, options)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildJob indicates an expected call of BuildJob.
func (mr *MockJenkinsMockRecorder) BuildJob(ctx, name, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJob", reflect.TypeOf((*MockJenkins)(nil).BuildJob), ctx, name, options)
}

// CopyJob mocks base method.
func (m *MockJenkins) CopyJob(ctx context.Context, copyFrom, newName string) (*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyJob", ctx, copyFrom, newName)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyJob indicates an expected call of CopyJob.
func (mr *MockJenkinsMockRecorder) CopyJob(ctx, copyFrom, newName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyJob", reflect.TypeOf((*MockJenkins)(nil).CopyJob), ctx, copyFrom, newName)
}

// CreateFolder mocks base method.
func (m *MockJenkins) CreateFolder(ctx context.Context, name string, parents ...string) (*gojenkins.Folder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name}
	for _, a := range parents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateFolder", varargs...)
	ret0, _ := ret[0].(*gojenkins.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFolder indicates an expected call of CreateFolder.
func (mr *MockJenkinsMockRecorder) CreateFolder(ctx, name interface{}, parents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name}, parents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFolder", reflect.TypeOf((*MockJenkins)(nil).CreateFolder), varargs...)
}

// CreateJob mocks base method.
func (m *MockJenkins) CreateJob(ctx context.Context, config string, options ...interface{}) (*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, config}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJob", varargs...)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockJenkinsMockRecorder) CreateJob(ctx, config interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, config}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockJenkins)(nil).CreateJob), varargs...)
}

// CreateJobInFolder mocks base method.
func (m *MockJenkins) CreateJobInFolder(ctx context.Context, config, jobName string, parentIDs ...string) (*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, config, jobName}
	for _, a := range parentIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateJobInFolder", varargs...)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJobInFolder indicates an expected call of CreateJobInFolder.
func (mr *MockJenkinsMockRecorder) CreateJobInFolder(ctx, config, jobName interface{}, parentIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, config, jobName}, parentIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJobInFolder", reflect.TypeOf((*MockJenkins)(nil).CreateJobInFolder), varargs...)
}

// CreateNode mocks base method.
func (m *MockJenkins) CreateNode(ctx context.Context, name string, numExecutors int, description, remoteFS, label string, options ...interface{}) (*gojenkins.Node, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, name, numExecutors, description, remoteFS, label}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNode", varargs...)
	ret0, _ := ret[0].(*gojenkins.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockJenkinsMockRecorder) CreateNode(ctx, name, numExecutors, description, remoteFS, label interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, name, numExecutors, description, remoteFS, label}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockJenkins)(nil).CreateNode), varargs...)
}

// CreateOrUpdateJob mocks base method.
func (m *MockJenkins) CreateOrUpdateJob(config, jobName string) (*gojenkins.Job, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateJob", config, jobName)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateJob indicates an expected call of CreateOrUpdateJob.
func (mr *MockJenkinsMockRecorder) CreateOrUpdateJob(config, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateJob", reflect.TypeOf((*MockJenkins)(nil).CreateOrUpdateJob), config, jobName)
}

// CreateView mocks base method.
func (m *MockJenkins) CreateView(ctx context.Context, name, viewType string) (*gojenkins.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", ctx, name, viewType)
	ret0, _ := ret[0].(*gojenkins.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateView indicates an expected call of CreateView.
func (mr *MockJenkinsMockRecorder) CreateView(ctx, name, viewType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockJenkins)(nil).CreateView), ctx, name, viewType)
}

// DeleteJob mocks base method.
func (m *MockJenkins) DeleteJob(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockJenkinsMockRecorder) DeleteJob(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockJenkins)(nil).DeleteJob), ctx, name)
}

// DeleteNode mocks base method.
func (m *MockJenkins) DeleteNode(ctx context.Context, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockJenkinsMockRecorder) DeleteNode(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockJenkins)(nil).DeleteNode), ctx, name)
}

// ExecuteScript mocks base method.
func (m *MockJenkins) ExecuteScript(groovyScript string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteScript", groovyScript)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript.
func (mr *MockJenkinsMockRecorder) ExecuteScript(groovyScript interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockJenkins)(nil).ExecuteScript), groovyScript)
}

// GenerateToken mocks base method.
func (m *MockJenkins) GenerateToken(userName, tokenName string) (*UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userName, tokenName)
	ret0, _ := ret[0].(*UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockJenkinsMockRecorder) GenerateToken(userName, tokenName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockJenkins)(nil).GenerateToken), userName, tokenName)
}

// GetAllBuildIds mocks base method.
func (m *MockJenkins) GetAllBuildIds(ctx context.Context, job string) ([]gojenkins.JobBuild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBuildIds", ctx, job)
	ret0, _ := ret[0].([]gojenkins.JobBuild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBuildIds indicates an expected call of GetAllBuildIds.
func (mr *MockJenkinsMockRecorder) GetAllBuildIds(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBuildIds", reflect.TypeOf((*MockJenkins)(nil).GetAllBuildIds), ctx, job)
}

// GetAllJobNames mocks base method.
func (m *MockJenkins) GetAllJobNames(arg0 context.Context) ([]gojenkins.InnerJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobNames", arg0)
	ret0, _ := ret[0].([]gojenkins.InnerJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobNames indicates an expected call of GetAllJobNames.
func (mr *MockJenkinsMockRecorder) GetAllJobNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobNames", reflect.TypeOf((*MockJenkins)(nil).GetAllJobNames), arg0)
}

// GetAllJobs mocks base method.
func (m *MockJenkins) GetAllJobs(arg0 context.Context) ([]*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs", arg0)
	ret0, _ := ret[0].([]*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockJenkinsMockRecorder) GetAllJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockJenkins)(nil).GetAllJobs), arg0)
}

// GetAllNodes mocks base method.
func (m *MockJenkins) GetAllNodes(ctx context.Context) ([]*gojenkins.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNodes", ctx)
	ret0, _ := ret[0].([]*gojenkins.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNodes indicates an expected call of GetAllNodes.
func (mr *MockJenkinsMockRecorder) GetAllNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNodes", reflect.TypeOf((*MockJenkins)(nil).GetAllNodes), ctx)
}

// GetAllViews mocks base method.
func (m *MockJenkins) GetAllViews(arg0 context.Context) ([]*gojenkins.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllViews", arg0)
	ret0, _ := ret[0].([]*gojenkins.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllViews indicates an expected call of GetAllViews.
func (mr *MockJenkinsMockRecorder) GetAllViews(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllViews", reflect.TypeOf((*MockJenkins)(nil).GetAllViews), arg0)
}

// GetArtifactData mocks base method.
func (m *MockJenkins) GetArtifactData(ctx context.Context, id string) (*gojenkins.FingerPrintResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifactData", ctx, id)
	ret0, _ := ret[0].(*gojenkins.FingerPrintResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifactData indicates an expected call of GetArtifactData.
func (mr *MockJenkinsMockRecorder) GetArtifactData(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifactData", reflect.TypeOf((*MockJenkins)(nil).GetArtifactData), ctx, id)
}

// GetBuild mocks base method.
func (m *MockJenkins) GetBuild(jobName string, number int64) (*gojenkins.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", jobName, number)
	ret0, _ := ret[0].(*gojenkins.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockJenkinsMockRecorder) GetBuild(jobName, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockJenkins)(nil).GetBuild), jobName, number)
}

// GetFolder mocks base method.
func (m *MockJenkins) GetFolder(ctx context.Context, id string, parents ...string) (*gojenkins.Folder, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range parents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFolder", varargs...)
	ret0, _ := ret[0].(*gojenkins.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolder indicates an expected call of GetFolder.
func (mr *MockJenkinsMockRecorder) GetFolder(ctx, id interface{}, parents ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, parents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolder", reflect.TypeOf((*MockJenkins)(nil).GetFolder), varargs...)
}

// GetJob mocks base method.
func (m *MockJenkins) GetJob(ctx context.Context, id string, parentIDs ...string) (*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, id}
	for _, a := range parentIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJob", varargs...)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockJenkinsMockRecorder) GetJob(ctx, id interface{}, parentIDs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, id}, parentIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockJenkins)(nil).GetJob), varargs...)
}

// GetLabel mocks base method.
func (m *MockJenkins) GetLabel(ctx context.Context, name string) (*gojenkins.Label, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabel", ctx, name)
	ret0, _ := ret[0].(*gojenkins.Label)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabel indicates an expected call of GetLabel.
func (mr *MockJenkinsMockRecorder) GetLabel(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabel", reflect.TypeOf((*MockJenkins)(nil).GetLabel), ctx, name)
}

// GetNode mocks base method.
func (m *MockJenkins) GetNode(ctx context.Context, name string) (*gojenkins.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, name)
	ret0, _ := ret[0].(*gojenkins.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockJenkinsMockRecorder) GetNode(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockJenkins)(nil).GetNode), ctx, name)
}

// GetNodeSecret mocks base method.
func (m *MockJenkins) GetNodeSecret(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeSecret", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeSecret indicates an expected call of GetNodeSecret.
func (mr *MockJenkinsMockRecorder) GetNodeSecret(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeSecret", reflect.TypeOf((*MockJenkins)(nil).GetNodeSecret), name)
}

// GetPlugins mocks base method.
func (m *MockJenkins) GetPlugins(depth int) (*gojenkins.Plugins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins", depth)
	ret0, _ := ret[0].(*gojenkins.Plugins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockJenkinsMockRecorder) GetPlugins(depth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockJenkins)(nil).GetPlugins), depth)
}

// GetQueue mocks base method.
func (m *MockJenkins) GetQueue(arg0 context.Context) (*gojenkins.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", arg0)
	ret0, _ := ret[0].(*gojenkins.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockJenkinsMockRecorder) GetQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockJenkins)(nil).GetQueue), arg0)
}

// GetQueueItem mocks base method.
func (m *MockJenkins) GetQueueItem(ctx context.Context, id int64) (*gojenkins.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueItem", ctx, id)
	ret0, _ := ret[0].(*gojenkins.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueItem indicates an expected call of GetQueueItem.
func (mr *MockJenkinsMockRecorder) GetQueueItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueItem", reflect.TypeOf((*MockJenkins)(nil).GetQueueItem), ctx, id)
}

// GetQueueUrl mocks base method.
func (m *MockJenkins) GetQueueUrl() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueUrl")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetQueueUrl indicates an expected call of GetQueueUrl.
func (mr *MockJenkinsMockRecorder) GetQueueUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueUrl", reflect.TypeOf((*MockJenkins)(nil).GetQueueUrl))
}

// GetSubJob mocks base method.
func (m *MockJenkins) GetSubJob(ctx context.Context, parentID, childID string) (*gojenkins.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubJob", ctx, parentID, childID)
	ret0, _ := ret[0].(*gojenkins.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubJob indicates an expected call of GetSubJob.
func (mr *MockJenkinsMockRecorder) GetSubJob(ctx, parentID, childID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubJob", reflect.TypeOf((*MockJenkins)(nil).GetSubJob), ctx, parentID, childID)
}

// GetView mocks base method.
func (m *MockJenkins) GetView(ctx context.Context, name string) (*gojenkins.View, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetView", ctx, name)
	ret0, _ := ret[0].(*gojenkins.View)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetView indicates an expected call of GetView.
func (mr *MockJenkinsMockRecorder) GetView(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetView", reflect.TypeOf((*MockJenkins)(nil).GetView), ctx, name)
}

// HasPlugin mocks base method.
func (m *MockJenkins) HasPlugin(ctx context.Context, name string) (*gojenkins.Plugin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPlugin", ctx, name)
	ret0, _ := ret[0].(*gojenkins.Plugin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPlugin indicates an expected call of HasPlugin.
func (mr *MockJenkinsMockRecorder) HasPlugin(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPlugin", reflect.TypeOf((*MockJenkins)(nil).HasPlugin), ctx, name)
}

// Info mocks base method.
func (m *MockJenkins) Info(ctx context.Context) (*gojenkins.ExecutorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx)
	ret0, _ := ret[0].(*gojenkins.ExecutorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockJenkinsMockRecorder) Info(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockJenkins)(nil).Info), ctx)
}

// InstallPlugin mocks base method.
func (m *MockJenkins) InstallPlugin(ctx context.Context, name, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallPlugin", ctx, name, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallPlugin indicates an expected call of InstallPlugin.
func (mr *MockJenkinsMockRecorder) InstallPlugin(ctx, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallPlugin", reflect.TypeOf((*MockJenkins)(nil).InstallPlugin), ctx, name, version)
}

// Poll mocks base method.
func (m *MockJenkins) Poll(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll.
func (mr *MockJenkinsMockRecorder) Poll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockJenkins)(nil).Poll), ctx)
}

// RenameJob mocks base method.
func (m *MockJenkins) RenameJob(ctx context.Context, job, name string) *gojenkins.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameJob", ctx, job, name)
	ret0, _ := ret[0].(*gojenkins.Job)
	return ret0
}

// RenameJob indicates an expected call of RenameJob.
func (mr *MockJenkinsMockRecorder) RenameJob(ctx, job, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameJob", reflect.TypeOf((*MockJenkins)(nil).RenameJob), ctx, job, name)
}

// SafeRestart mocks base method.
func (m *MockJenkins) SafeRestart(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeRestart", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SafeRestart indicates an expected call of SafeRestart.
func (mr *MockJenkinsMockRecorder) SafeRestart(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeRestart", reflect.TypeOf((*MockJenkins)(nil).SafeRestart), ctx)
}

// UninstallPlugin mocks base method.
func (m *MockJenkins) UninstallPlugin(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallPlugin", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallPlugin indicates an expected call of UninstallPlugin.
func (mr *MockJenkinsMockRecorder) UninstallPlugin(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallPlugin", reflect.TypeOf((*MockJenkins)(nil).UninstallPlugin), ctx, name)
}

// ValidateFingerPrint mocks base method.
func (m *MockJenkins) ValidateFingerPrint(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFingerPrint", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateFingerPrint indicates an expected call of ValidateFingerPrint.
func (mr *MockJenkinsMockRecorder) ValidateFingerPrint(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFingerPrint", reflect.TypeOf((*MockJenkins)(nil).ValidateFingerPrint), ctx, id)
}
